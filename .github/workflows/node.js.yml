# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Test pipeline

on:
  push:
    branches: [ "prod" ]
  pull_request:
    branches: [ "prod" ]

permissions:
  actions: read
  checks: read
  contents: read
  deployments: read
  id-token: write
  issues: read
  discussions: read
  packages: read
  pages: write
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Setup Backend Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/monolith/package-lock.json
    - run: npm ci
      working-directory: backend/monolith
    # - run: npm run build --if-present
    - name: Backend Test
      run: |
        if find . -type f \( -name '*.test.js' -o -name '*.spec.js' \) -exec false {} +; then
          echo "No test files found."
        else
          npm run test
        fi
      working-directory: backend/monolith
    - name: Setup Frontend Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    - run: npm ci
      working-directory: frontend
    # - run: npm run build --if-present
    - name: frontend Test
      run: |
        if find . -type f \( -name '*.test.js' -o -name '*.spec.js' \) -exec false {} +; then
          echo "No test files found."
        else
          npm run test
        fi
      env:
        hostname: ${{ secrets.HOSTNAME }}
        user: ${{ secrets.USER }}
        password: ${{ secrets.PASSWORD }}
      working-directory: frontend
      